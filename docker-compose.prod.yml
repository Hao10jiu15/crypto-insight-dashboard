version: '3.8'

services:
  # 数据库服务
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    env_file:
      - .env.production
    restart: unless-stopped
    networks:
      - crypto_network

  # 缓存与消息代理服务
  redis:
    image: redis:7-alpine
    container_name: crypto_redis_prod
    restart: unless-stopped
    networks:
      - crypto_network

  # Django 后端应用服务
  backend:
    container_name: crypto_backend_prod
    build: ./backend
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - crypto_network

  # 前端服务
  frontend:
    container_name: crypto_frontend_prod
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_build:/app/dist
    restart: unless-stopped
    networks:
      - crypto_network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: crypto_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - frontend_build:/var/www/html
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - crypto_network

  # Celery 后台任务执行者
  celery_worker:
    container_name: crypto_celery_worker_prod
    build: ./backend
    command: celery -A config worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - crypto_network

  # Celery 任务调度器
  celery_beat:
    container_name: crypto_celery_beat_prod
    build: ./backend
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - crypto_network

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:
  frontend_build:

networks:
  crypto_network:
    driver: bridge
